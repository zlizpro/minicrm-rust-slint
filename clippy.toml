# =============================================================================
# MiniCRM Clippy 代码质量检查配置
# =============================================================================
#
# 本配置文件定义了严格的代码质量检查规则，确保代码安全性和可维护性。
# 配置遵循Rust最佳实践，同时考虑了项目特定需求。
#
# 配置原则：
# 1. 安全第一：禁止可能导致panic的不安全操作
# 2. 可维护性：限制复杂度，提高代码可读性
# 3. 性能考虑：避免不必要的内存分配和复制
# 4. 框架兼容：处理Slint UI框架生成代码的特殊情况
#
# 特别说明：
# Slint UI框架生成的代码包含unwrap/panic等调用，这些是框架内部使用的，
# 通过build.rs脚本为生成的代码添加allow属性来处理这些情况。
# 手写代码仍然需要遵循严格的质量标准。
#
# =============================================================================

# -----------------------------------------------------------------------------
# 复杂度控制配置
# 控制代码复杂度，提高可维护性
# -----------------------------------------------------------------------------

# 认知复杂度限制
# 认知复杂度衡量代码的理解难度，包括嵌套、条件分支等
# 建议值：简单函数 < 10，复杂函数 < 30
cognitive-complexity-threshold = 30

# 类型复杂度限制
# 限制类型定义的复杂度，避免过于复杂的泛型类型
# 过高的类型复杂度会影响编译时间和代码可读性
type-complexity-threshold = 250

# 函数参数数量限制
# 过多的参数表明函数职责过重，应考虑重构
# 建议使用结构体或配置对象来传递多个相关参数
too-many-arguments-threshold = 7

# 函数行数限制
# 过长的函数难以理解和测试，应拆分为更小的函数
# 不包括注释和空行
too-many-lines-threshold = 100

# 结构体布尔字段限制
# 过多的布尔字段可能表明需要使用枚举或状态模式
# 有助于避免"布尔参数地狱"
max-struct-bools = 3

# -----------------------------------------------------------------------------
# 性能优化配置
# 避免不必要的性能开销
# -----------------------------------------------------------------------------

# 琐碎复制大小限制（字节）
# 小于此大小的类型可以直接复制而不是借用
# 避免不必要的引用传递开销
trivial-copy-size-limit = 64

# 传递值大小限制（字节）
# 大于此大小的值应该通过引用传递
# 避免大对象的栈复制开销
pass-by-value-size-limit = 256

# 栈上大型类型限制（字节）
# 过大的栈分配可能导致栈溢出
# 建议使用Box将大对象分配到堆上
too-large-for-stack = 200

# 向量装箱大小阈值（字节）
# Vec<Box<T>>中T的大小阈值
# 避免频繁的堆分配
vec-box-size-threshold = 4096

# 大型栈数组限制（字节）
# 大数组应该分配在堆上或使用静态分配
# 防止栈溢出
array-size-threshold = 512000

# -----------------------------------------------------------------------------
# 代码风格和可读性配置
# 提高代码一致性和可读性
# -----------------------------------------------------------------------------

# 单个字母标识符限制
# 允许的单字母变量名数量（如i, j, k用于循环）
# 鼓励使用描述性的变量名
single-char-binding-names-threshold = 4

# 最大建议切片模式长度
# 限制模式匹配中切片模式的长度
# 过长的模式匹配难以理解
max-suggested-slice-pattern-length = 3

# 字面量数字分隔符阈值
# 大于此值的数字字面量应使用下划线分隔符
# 提高大数字的可读性（如1_000_000）
literal-representation-threshold = 10000

# 枚举变体名称阈值
# 枚举变体名称相似度检查的阈值
# 避免容易混淆的枚举变体名称
enum-variant-name-threshold = 3

# -----------------------------------------------------------------------------
# API设计和兼容性配置
# 确保API设计的一致性和向后兼容性
# -----------------------------------------------------------------------------

# 避免破坏性API更改
# 检查可能破坏向后兼容性的更改
# 对于库crate特别重要
avoid-breaking-exported-api = true

# 允许的脚本类型
# 限制标识符中允许使用的Unicode脚本
# 提高代码的国际化兼容性
allowed-scripts = ["Latin"]

# -----------------------------------------------------------------------------
# 代码质量和安全配置
# 禁止可能导致问题的代码模式
# -----------------------------------------------------------------------------

# 禁用的标识符名称
# 避免使用无意义的占位符名称
# 鼓励使用有意义的变量名
disallowed-names = ["foo", "bar", "baz", "quux", "temp", "tmp"]

# 允许的重复依赖
# 控制依赖树中的重复crate
# 空列表表示不允许任何重复依赖
# 有助于减少二进制大小和编译时间
allowed-duplicate-crates = []

# -----------------------------------------------------------------------------
# 框架特定配置
# 处理第三方框架的特殊需求
# -----------------------------------------------------------------------------

# Slint UI框架兼容性说明：
#
# Slint生成的代码可能包含以下在手写代码中被禁止的模式：
#
# 1. unwrap() 调用：
#    - 框架内部确保这些调用是安全的
#    - 用于访问已验证的内部状态
#    - 通过build.rs脚本添加 #[allow(clippy::unwrap_used)]
#
# 2. panic!() 调用：
#    - 用于处理不应该发生的内部错误
#    - 表示框架内部的不变量被违反
#    - 通过build.rs脚本添加 #[allow(clippy::panic)]
#
# 3. expect() 调用：
#    - 框架内部错误处理机制
#    - 提供比unwrap更好的错误信息
#    - 通过build.rs脚本添加 #[allow(clippy::expect_used)]
#
# 处理策略：
# - build.rs脚本检测生成的代码文件
# - 自动为生成的代码添加相应的allow属性
# - 手写代码仍然受到严格的质量检查
# - 确保框架兼容性的同时保持代码质量标准
#
# 注意：这些allow属性仅适用于框架生成的代码，
# 手写代码必须遵循严格的错误处理标准。

# -----------------------------------------------------------------------------
# 配置验证和维护说明
# -----------------------------------------------------------------------------

# 配置更新指南：
# 1. 修改阈值前请评估对现有代码的影响
# 2. 新增规则时考虑团队的接受度和学习成本
# 3. 定期审查配置的有效性和必要性
# 4. 记录配置更改的原因和影响范围
#
# 性能影响：
# - 更严格的规则会增加编译时间
# - 某些规则可能产生大量警告，影响开发体验
# - 建议在CI/CD中运行完整检查，本地开发时可适当放宽
#
# 团队协作：
# - 确保所有团队成员了解配置的目的和规则
# - 提供规则违反时的修复指导
# - 建立代码审查流程确保配置的执行
