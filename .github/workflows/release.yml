name: Release

on:
  push:
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          body: |
            ## 更新内容

            请查看 [CHANGELOG.md](CHANGELOG.md) 了解详细的更新内容。

            ## 安装说明

            ### Windows
            下载 `minicrm-windows-x86_64.exe` 并运行。

            ### macOS
            下载对应架构的版本：
            - Intel Mac: `minicrm-macos-x86_64`
            - Apple Silicon: `minicrm-macos-aarch64`

            ### Linux
            下载 `minicrm-linux-x86_64` 并添加执行权限：
            ```bash
            chmod +x minicrm-linux-x86_64
            ./minicrm-linux-x86_64
            ```

  build-and-upload:
    name: Build and Upload
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: minicrm
            asset_name: minicrm-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: minicrm.exe
            asset_name: minicrm-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: minicrm
            asset_name: minicrm-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: minicrm
            asset_name: minicrm-macos-aarch64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev

      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew install pkg-config

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }} --all-features

      - name: Strip binary (Unix)
        if: runner.os != 'Windows'
        run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream
